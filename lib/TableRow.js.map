{"version":3,"file":"TableRow.js","sourceRoot":"","sources":["../src/TableRow.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAG/B,gDAAyC;AACzC,iCAAiD;AA+C1C,IAAM,QAAQ,GAAG,UAAK,KAAgC;IAC3D,IAAM,QAAQ,GAAU,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAA,KAAiF,IAAA,gCAAwB,EAAC,KAAK,CAAC,EAA/G,iBAAiB,uBAAA,EAAE,mBAAmB,yBAAA,EAAE,kBAAkB,wBAAA,EAAE,gBAAgB,sBAAmC,CAAC;IAEvH,IAAI,kBAAkB,GAAG,CAAC,CAAC;IAC3B,IAAI,yBAAyB,GAAG,CAAC,CAAC;IAClC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAkE;QAClF,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE;YACnC,kBAAkB,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;YACxC,yBAAyB,EAAE,CAAC;SAC7B;IACH,CAAC,CAAC,CAAC;IAEH,IAAM,yBAAyB,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,yBAAyB,CAAC,CAAC,CAAC;IAEhH,IAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;IAEnI,OAAO,CACH,oBAAC,eAAI,IACH,KAAK,EAAE;YACL,YAAY,EAAE,mBAAmB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAClE,WAAW,EAAE,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAChE,UAAU,EAAE,iBAAiB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC9D,SAAS,EAAE,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,KAAK;YACpB,cAAc,EAAE,eAAe;YAC/B,eAAe,EAAE,QAAQ;SAC1B,IAGG,QAAQ,CAAC,GAAG,CAAC,UAAC,EAAE,EAAE,WAAW,IAAK,OAAA,KAAK,CAAC,YAAY,CAAC,EAAE,EAAE;QACvD,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,IAAI,yBAAyB;QAC1D,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,GAAG,EAAE,WAAW;QAChB,QAAQ,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ;QAC7C,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS;QAChD,iBAAiB,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,iBAAiB,IAAI,IAAI,CAAC,IAAI,WAAW,KAAK,CAAC;QAC5E,kBAAkB,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,kBAAkB,IAAI,IAAI,CAAC,IAAI,kBAAkB,IAAI,WAAW,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;KACzH,CAAC,EARgC,CAQhC,CAAC,CAEF,CACV,CAAC;AACJ,CAAC,CAAA;AA5CY,QAAA,QAAQ,YA4CpB","sourcesContent":["import * as React from \"react\";\r\nimport {TableBorder, TableCell} from \"./TableCell\";\r\nimport {DataTableCell} from \"./DataTableCell\";\r\nimport {View} from \"@react-pdf/renderer\";\r\nimport {getDefaultBorderIncludes} from \"./Utils\";\r\n\r\nexport interface TableRowProps<T> extends TableBorder {\r\n    /**\r\n     * The font size as a valid unit defined in react-pdf.\r\n     */\r\n    fontSize?: number | string;\r\n\r\n    /**\r\n     * Whether to align the text. Defaults to left.\r\n     */\r\n    textAlign?: \"left\" | \"center\" | \"right\";\r\n\r\n    /**\r\n     * Any data associated, relevant if the parent is a {@see DataTableCell}.\r\n     */\r\n    data?: T;\r\n\r\n    /**\r\n     * Whether rows have alternating styles\r\n     */\r\n    zebra?: boolean;\r\n\r\n    /**\r\n     * Whether this row is even (true) or odd (false)\r\n     */\r\n    even?: boolean;\r\n\r\n    /**\r\n     * Specify the color of even rows\r\n     */\r\n    evenRowColor?: string;\r\n\r\n    /**\r\n     * Specify the color of odd rows\r\n     */\r\n    oddRowColor?: string;\r\n\r\n    /**\r\n     * fix 'Property children does not exists on type ... ts(2339)'\r\n     */\r\n    children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * This component describes how to display a row.\r\n */\r\nexport const TableRow = <T,>(props: Partial<TableRowProps<T>>) => {\r\n  const rowCells: any[] = React.Children.toArray(props.children);\r\n  const {includeLeftBorder, includeBottomBorder, includeRightBorder, includeTopBorder} = getDefaultBorderIncludes(props);\r\n\r\n  let remainingWeighting = 1;\r\n  let numberOfWeightingsDefined = 0;\r\n  rowCells.forEach((i: ReturnType<typeof TableCell> | ReturnType<typeof DataTableCell>) => {\r\n    if (i.props.weighting !== undefined) {\r\n      remainingWeighting -= i.props.weighting;\r\n      numberOfWeightingsDefined++;\r\n    }\r\n  });\r\n\r\n  const weightingsPerNotSpecified = Math.ceil(remainingWeighting / (rowCells.length - numberOfWeightingsDefined));\r\n\r\n  const rowColor = ((props.zebra || props.evenRowColor) && props.even) ? props.evenRowColor || 'lightgray' : props.oddRowColor || '';\r\n\r\n  return (\r\n      <View\r\n        style={{\r\n          borderBottom: includeBottomBorder === true ? \"1pt solid black\" : 0,\r\n          borderRight: includeRightBorder === true ? \"1pt solid black\" : 0,\r\n          borderLeft: includeLeftBorder === true ? \"1pt solid black\" : 0,\r\n          borderTop: includeTopBorder === true ? \"1pt solid black\" : 0,\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"space-between\",\r\n          backgroundColor: rowColor,\r\n        }}\r\n      >\r\n          {\r\n            rowCells.map((rc, columnIndex) => React.cloneElement(rc, {\r\n              weighting: rc.props.weighting || weightingsPerNotSpecified,\r\n              data: props.data,\r\n              key: columnIndex,\r\n              fontSize: rc.props.fontSize || props.fontSize,\r\n              textAlign: rc.props.textAlign || props.textAlign,\r\n              includeLeftBorder: (rc.props.includeLeftBorder || true) && columnIndex === 0,\r\n              includeRightBorder: (rc.props.includeRightBorder || true) && includeRightBorder && columnIndex !== (rowCells.length - 1)\r\n            }))\r\n          }\r\n      </View>\r\n  );\r\n}\r\n"]}