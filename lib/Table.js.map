{"version":3,"file":"Table.js","sourceRoot":"","sources":["../src/Table.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAA0C;AAC1C,yCAAsC;AACtC,gDAAyC;AACzC,yCAAwC;AACxC,uCAAsC;AACtC,iDAAgD;AA2CzC,IAAM,KAAK,GAAG,UAAM,KAAoB;;IAE3C,IAAM,kBAAkB,GAAG,KAAK,CAAC,QAAQ,CAAC;IAC1C,IAAM,GAAG,GAAG,OAAO,kBAAkB,KAAK,UAAU;QAChD,CAAC,CAAE,kBAAkB,CAAC;YACd,WAAW,2BAAA;YACX,SAAS,uBAAA;YACT,QAAQ,qBAAA;YACR,SAAS,uBAAA;YACT,aAAa,+BAAA;SAChB,CAAS,CAAC,KAAK,CAAC,QAA6B;QAClD,CAAC,CAAC,kBAAkB,CAAC;IAEzB,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7C,IAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAqB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,yBAAW,EAAtB,CAAsB,CAAuB,CAAC;IAC3G,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAqB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAS,EAApB,CAAoB,CAAuB,CAAC;IAEvG,IAAM,iBAAiB,GAAG,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE;QACpD,IAAI,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,IAAW,mCAAI,KAAK,CAAC,IAAI,mCAAI,EAAE;QACvD,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW;QACtD,KAAK,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,KAAK,mCAAI,KAAK,CAAC,KAAK,mCAAI,KAAK;QACtD,YAAY,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,YAAY,mCAAI,KAAK,CAAC,YAAY,mCAAI,EAAE;QACxE,WAAW,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,WAAW,mCAAI,KAAK,CAAC,WAAW,mCAAI,EAAE;KACxE,CAAC,CAAC;IAEH,OAAO,CACH,oBAAC,eAAI,IACD,KAAK,EAAE;YACH,KAAK,EAAE,MAAM;SAChB;QAEA,WAAW;QACX,iBAAiB,CACf,CACV,CAAC;AACN,CAAC,CAAA;AAnCY,QAAA,KAAK,SAmCjB","sourcesContent":["import * as React from \"react\";\r\nimport {TableHeader} from \"./TableHeader\";\r\nimport {TableBody} from \"./TableBody\";\r\nimport {View} from \"@react-pdf/renderer\";\r\nimport { TableCell } from \"./TableCell\";\r\nimport { TableRow } from \"./TableRow\";\r\nimport { DataTableCell } from \"./DataTableCell\";\r\n\r\nexport interface ZebraProps {\r\n    /**\r\n     * Whether to display alternate row colours.\r\n     * Defaults to false.\r\n     */\r\n    zebra?: boolean;\r\n\r\n    /**\r\n     * The even row colour when {@see zebra} is true.\r\n     * Defaults to lightgray if not defined.\r\n     */\r\n    evenRowColor?: string;\r\n\r\n    /**\r\n     * The odd row colour when {@see zebra} is true.\r\n     * Defaults to transparent or '' if not defined.\r\n     */\r\n    oddRowColor?: string;\r\n}\r\n\r\nexport interface TableProps<T> extends ZebraProps {\r\n    /**\r\n     * The table data to display.\r\n     */\r\n    data?: Array<T>;\r\n\r\n    /**\r\n     * Indicates that this is a nested table.\r\n     * Otherwise assumed to be false.\r\n     */\r\n    isNested?: boolean;\r\n\r\n    children?: React.ReactNode | ((e: { \r\n        TableHeader: typeof TableHeader;\r\n        TableBody: typeof TableBody<T>;\r\n        TableRow: typeof TableRow<T>;\r\n        TableCell: typeof TableCell;\r\n        DataTableCell: typeof DataTableCell<T>;\r\n    }) => React.ReactFragment);\r\n}\r\n\r\nexport const Table = <T,> (props: TableProps<T>) => {\r\n\r\n    const fragmentOrChildren = props.children;\r\n    const tmp = typeof fragmentOrChildren === 'function'\r\n        ? (fragmentOrChildren({\r\n                TableHeader,\r\n                TableBody,\r\n                TableRow,\r\n                TableCell,\r\n                DataTableCell,\r\n            }) as any).props.children as React.ReactNode[]\r\n        : fragmentOrChildren;\r\n\r\n    const children = React.Children.toArray(tmp);\r\n    const tableHeader = children.find((e: React.ReactElement) => e.type === TableHeader) as React.ReactElement;\r\n    const tableBody = children.find((e: React.ReactElement) => e.type === TableBody) as React.ReactElement;\r\n\r\n    const fallbackTableBody = React.cloneElement(tableBody, {\r\n        data: tableBody?.props?.data as T[] ?? props.data ?? [],\r\n        renderTopBorder: props.isNested ? false : !tableHeader,\r\n        zebra: tableBody?.props?.zebra ?? props.zebra ?? false,\r\n        evenRowColor: tableBody?.props?.evenRowColor ?? props.evenRowColor ?? '',\r\n        oddRowColor: tableBody?.props?.oddRowColor ?? props.oddRowColor ?? '',\r\n    });\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                width: \"100%\",\r\n            }}\r\n        >\r\n            {tableHeader}\r\n            {fallbackTableBody}\r\n        </View>\r\n    );\r\n}\r\n"]}