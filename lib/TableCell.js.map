{"version":3,"file":"TableCell.js","sourceRoot":"","sources":["../src/TableCell.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,gDAAyD;AACzD,iCAAmE;AA6D5D,IAAM,SAAS,GAA6B,UAAC,KAAK;;IACrD,IAAM,OAAO,GAAG,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;QAC9C,CAAC,CAAE,oBAAC,eAAI,QAAE,KAAK,CAAC,QAAQ,CAAQ;QAChC,CAAC,CAAC,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;YACpC,CAAC,CAAE,oBAAC,eAAI,QAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAQ;YAC3C,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;IAEd,IAAA,kBAAkB,GAAI,IAAA,gCAAwB,EAAC,KAAK,CAAC,mBAAnC,CAAoC;IAE7D,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAA;IAC7B,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAA;IAEjD,IAAM,YAAY,GAAmB;QACjC,IAAI,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,CAAC;QAE1B,cAAc,EAAE,SAAS;QACzB,SAAS,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,MAAM;QACpC,QAAQ,EAAE,MAAA,KAAK,CAAC,QAAQ,mCAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/D,WAAW,EAAE,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAChE,QAAQ,EAAE,YAAY;QACtB,UAAU,EAAE,UAAU;KACzB,CAAC;IAEF,IAAM,YAAY;QACd,YAAY;OACT,IAAA,wBAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,OACnC,CAAC;IAEF,OAAO,CACH,oBAAC,eAAI,IACD,KAAK,EAAE,YAAY,EACnB,IAAI,EAAE,IAAI,IAET,OAAO,CACL,CACV,CAAC;AACN,CAAC,CAAA;AApCY,QAAA,SAAS,aAoCrB","sourcesContent":["import * as React from \"react\";\r\nimport ReactPDF, {Text, View} from \"@react-pdf/renderer\";\r\nimport {getDefaultBorderIncludes, transformToArray} from \"./Utils\";\r\n\r\n/**\r\n * Whether to include borders or not.\r\n * Depending on the context some toggles will not have any effect.\r\n */\r\nexport interface TableBorder {\r\n    /**\r\n     * Include the top border. Default true.\r\n     */\r\n    includeTopBorder?: boolean;\r\n\r\n    /**\r\n     * Include the right border. Default true.\r\n     */\r\n    includeRightBorder?: boolean;\r\n\r\n    /**\r\n     * Include the bottom border. Default true.\r\n     */\r\n    includeBottomBorder?: boolean;\r\n\r\n    /**\r\n     * Include the left border. Default true.\r\n     */\r\n    includeLeftBorder?: boolean;\r\n}\r\n\r\nexport interface TableCellProps extends TableBorder {\r\n    /**\r\n     * The weighting of a cell based on the flex layout style.\r\n     * This value is between 0..1, if not specified 1 is assumed, this will take up the remaining available space.\r\n     */\r\n    weighting?: number;\r\n\r\n    /**\r\n     * Extra styling to apply. These will override existing style with the same key.\r\n     */\r\n    style?: ReactPDF.Style | ReactPDF.Style[];\r\n\r\n    /**\r\n     * How to align the text\r\n     */\r\n    textAlign?: \"left\" | \"center\" | \"right\";\r\n\r\n    /**\r\n     * Whether this is a header cell or not. If not defined it will be false.\r\n     */\r\n    isHeader?: boolean;\r\n\r\n    /**\r\n     * The font-size to apply to the cell.\r\n     */\r\n    fontSize?: number | string;\r\n\r\n    children?: React.ReactNode;\r\n}\r\n\r\n/**\r\n * This component displays the associated content of it's children.\r\n */\r\nexport const TableCell: React.FC<TableCellProps> = (props) => {\r\n    const content = typeof props.children === \"string\"\r\n        ?  <Text>{props.children}</Text>\r\n        : typeof props.children === \"number\"\r\n        ?  <Text>{props.children.toString()}</Text>\r\n        : props.children;\r\n\r\n    const {includeRightBorder} = getDefaultBorderIncludes(props);\r\n\r\n    console.log('props: ', props)\r\n    console.log('right border: ', includeRightBorder)\r\n\r\n    const defaultStyle: ReactPDF.Style = {\r\n        flex: props.weighting ?? 1,\r\n        // @ts-ignore\r\n        justifyContent: \"stretch\",\r\n        textAlign: props.textAlign ?? \"left\",\r\n        fontSize: props.fontSize ?? (props.isHeader === true ? 14 : 12),\r\n        borderRight: includeRightBorder === true ? \"1pt solid black\" : 0,\r\n        wordWrap: \"break-word\",\r\n        whiteSpace: \"pre-wrap\"\r\n    };\r\n\r\n    const mergedStyles: ReactPDF.Style[] = [\r\n        defaultStyle,\r\n        ...transformToArray(props.style)\r\n    ];\r\n\r\n    return (\r\n        <View\r\n            style={mergedStyles}\r\n            wrap={true}\r\n        >\r\n            {content}\r\n        </View>\r\n    );\r\n}\r\n"]}